@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    @using (Html.BeginForm())
    {
        <div class="form-group">
            <label for="emailContent">Email Content:</label>
            <textarea class="form-control" id="emailContent" rows="10">Dear Esteemed Colleague,

    It is with the utmost pleasure that I extend to you a most cordial welcome to our esteemed circle. Your arrival is much anticipated, and I look forward to the contributions your presence shall undoubtedly bring to our intellectual endeavors.

    I am writing to inquire, with no small degree of eagerness, whether you might grace us with your attendance at the forthcoming D&D Dive call, which has been meticulously scheduled to take place on the 11th of July, in the year of our Lord, 2024. Your participation would, of course, be regarded as an honour and would lend further distinction to this already significant occasion.

    Can you confirm your presence? I would be most grateful for your prompt response, as the event is fast approaching, and we are keen to finalize the arrangements.

    With all best wishes for your continued success and well-being, I remain,
    Yours faithfully and with the greatest respect,

    </textarea>
        </div>
        <button type="button" id="rewriteButton" class="btn btn-primary mt-3">Rewrite</button>
        <div id="spinner" class="spinner-border text-primary" style="display: none;"></div>
        <div id="calculatedIndex"></div>
        <div id="result"></div>
    }
</div>

@section Scripts {
    <script>
        // Debounce function to delay the API call
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), wait);
            };
        }

        // Function to call the API and update the result div
        async function callApiAndUpdateResult() {
            const emailContent = document.getElementById('emailContent').value;
            try {
                const response = await fetch('/api/calculate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content: emailContent })
                });
                const result = await response.json();
                document.getElementById('calculatedIndex').innerHTML = "<b>Readability index:</b>"+result.index;
            } catch (error) {
                console.error('Error calling API:', error);
            }
        }

        // Debounced version of the API call function
        const debouncedCallApi = debounce(callApiAndUpdateResult, 500);

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('emailContent').addEventListener('input', debouncedCallApi);
            
            //Calculate the readibility score immediately
            callApiAndUpdateResult();
            
            document.getElementById('rewriteButton').addEventListener('click', function () {
                var emailContent = document.getElementById('emailContent').value;
                document.getElementById('rewriteButton').disabled = true;
                document.getElementById('spinner').style.display = 'block';
                fetch('/api/rewrite', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 'content': emailContent })
                })
                .then(response => {
                    const reader = response.body.getReader();
                    const stream = new ReadableStream({
                        start(controller) {
                            function push() {
                                reader.read().then(({done, value}) => {
                                    if (done) {
                                        controller.close();
                                        document.getElementById('spinner').style.display = 'none';
                                        document.getElementById('rewriteButton').disabled = false;
                                        return;
                                    }
                                    controller.enqueue(value);
                                    document.getElementById('result').innerHTML += new TextDecoder().decode(value);
                                    push();
                                })
                            }
                            push();
                        }
                    });
                    return new Response(stream, { headers: { "Content-Type": "text/html" } });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    document.getElementById('spinner').style.display = 'none';
                    document.getElementById('rewriteButton').disabled = false;
                });
            });
        });
    </script>
}

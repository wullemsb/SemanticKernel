@{
    ViewData["Title"] = "Home Page";
}

<div class="row" style="margin-top: 2rem;">
    <div class="col-6">
        <div id="calculatedIndex"> </div>
    </div>
    <div class="col-6 text-end">
        <a href="#" class="button" id="rewriteButton">REWRITE</a>
    </div>
</div>
<table style="width: 100%; height: 100%;">
    <tr>
        <td style="width: 50%; height: 100%;">
<div class="row full-height">
    <!-- Left Column: Input Textarea -->

    <div class="col-md-6 mb-3">
        <div class="card h-100">
            <div class="card-header">
                Email content
            </div>
            @using (Html.BeginForm())
            {
                <div class="card-body">
                    <textarea class="form-control"
                              id="emailContent"
                              rows="15"
                              placeholder="Enter your text here...">
    Dear Esteemed Speaker,

    Allow me to extend a most cordial welcome to CloudBrew and the fair country of Belgium. It is my sincere hope that your sojourn among us will prove not only pleasant but also intellectually and culturally enriching.

    We eagerly anticipate the privilege of your presence and look forward to the conversations and camaraderie that await.

    With all best wishes for your continued success and well-being, I remain,

    Yours faithfully and with the greatest respect,
                                  </textarea>

                </div>
            }
        </div>
    </div>
        </td>
        <td style="width: 50%; height: 100%;">
    <!-- Right Column: Output Area -->
    <div class="col-md-6 mb-3">
        <div class="card h-100">
            <div class="card-header">
                Output
            </div>
            <div class="card-body" id="outputArea">
                <!-- Output will be rendered here -->
                <div id="spinner" class="spinner-border text-primary" style="display: none;">
                    <img src="~/90s-loading-spinner.svg" width="150" height="150" />
                </div>
                <div id="result"></div>
            </div>
        </div>
    </div>
</div>
        </td>
    </tr>
    </table>
@section Scripts {
    <script>
        // Debounce function to delay the API call
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), wait);
            };
        }

        // Function to call the API and update the result div
        async function callApiAndUpdateResult() {
            const emailContent = document.getElementById('emailContent').value;
            try {
                const response = await fetch('/api/calculate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ content: emailContent })
                });
                const result = await response.json();
                document.getElementById('calculatedIndex').innerText = result.index;
            } catch (error) {
                console.error('Error calling API:', error);
            }
        }

        // Debounced version of the API call function
        const debouncedCallApi = debounce(callApiAndUpdateResult, 500);

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('emailContent').addEventListener('input', debouncedCallApi);

            document.getElementById('rewriteButton').addEventListener('click', function () {
                var emailContent = document.getElementById('emailContent').value;
                document.getElementById('rewriteButton').disabled = true;
                document.getElementById('spinner').style.display = 'block';
                fetch('/api/rewrite', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 'content': emailContent })
                })
                .then(response => {
                    const reader = response.body.getReader();
                    const stream = new ReadableStream({
                        start(controller) {
                            function push() {
                                reader.read().then(({done, value}) => {
                                    if (done) {
                                        controller.close();
                                        document.getElementById('spinner').style.display = 'none';
                                        document.getElementById('rewriteButton').disabled = false;
                                        return;
                                    }
                                    controller.enqueue(value);
                                    document.getElementById('result').innerHTML += new TextDecoder().decode(value);
                                    push();
                                })
                            }
                            push();
                        }
                    });
                    return new Response(stream, { headers: { "Content-Type": "text/html" } });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    document.getElementById('spinner').style.display = 'none';
                    document.getElementById('rewriteButton').disabled = false;
                });
            });
        });
    </script>
}

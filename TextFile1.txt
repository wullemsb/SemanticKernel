AllowedAuthenticationClassReferences : {}
EncryptionCertificateRevocationCheck : CheckChainExcludeRoot
PublishedThroughProxy                : False
SigningCertificateRevocationCheck    : CheckChainExcludeRoot
WSFedEndpoint                        : https://localhost/TOMAS/FederationResult
AdditionalWSFedEndpoint              : {}
ClaimsProviderName                   : {}
ClaimsAccepted                       : {}
EncryptClaims                        : True
Enabled                              : True
EncryptionCertificate                : 
Identifier                           : {https://localhost/TOMAS/}
NotBeforeSkew                        : 0
EnableJWT                            : False
AlwaysRequireAuthentication          : False
Notes                                : 09/24/2021 11:01:01
OrganizationInfo                     : 
ObjectIdentifier                     : 75186cf0-151d-ec11-ae09-00155d01fa21
ProxyEndpointMappings                : {}
ProxyTrustedEndpoints                : {}
ProtocolProfile                      : WsFed-SAML
RequestSigningCertificate            : {}
EncryptedNameIdRequired              : False
SignedSamlRequestsRequired           : False
SamlEndpoints                        : {}
SamlResponseSignature                : AssertionOnly
SignatureAlgorithm                   : http://www.w3.org/2001/04/xmldsig-more#rsa-sha256
TokenLifetime                        : 0
AllowedClientTypes                   : Public, Confidential
IssueOAuthRefreshTokensTo            : AllDevices
RefreshTokenProtectionEnabled        : True
RequestMFAFromClaimsProviders        : False
ScopeGroupId                         : 
ScopeGroupIdentifier                 : 
DeviceAuthenticationMethod           : 
Name                                 : TOMAS localhost
AutoUpdateEnabled                    : False
MonitoringEnabled                    : False
MetadataUrl                          : 
ConflictWithPublishedPolicy          : False
IssuanceAuthorizationRules           : @RuleTemplate = "AllowAllAuthzRule"
                                        => issue(Type = "http://schemas.microsoft.com/authorization/claims/permit", Value = "true");
                                       
                                       
IssuanceTransformRules               : @RuleName = "IsAuthorizedVLM"
                                       c:[Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"]
                                        && c1:[Type == "http://schemas.vlm.be/iam/claims/source", Value == "VLM"]
                                        => issue(store = "VLM.IAM.PRD", types = ("http://schemas.vlm.be/iam/claims/authorized", "http://schemas.vlm.be/iam/claims/FullNam
                                       e", "http://schemas.vlm.be/iam/claims/VLMAccount", "http://schemas.vlm.be/iam/claims/VLMWebAccount", "http://schemas.vlm.be/iam/cl
                                       aims/AltName3", "http://schemas.vlm.be/iam/claims/rrnhash", "http://schemas.vlm.be/iam/claims/unauthorizedredirecturl"), query = "
                                       exec IsAuthorizedNaamFull @UserName={0}, @Application='TOMAS localhost'", param = c.Value);
                                       
                                       @RuleName = "IsAuthorizedVLMWEB"
                                       c:[Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"]
                                        && c1:[Type == "http://schemas.vlm.be/iam/claims/source", Value == "VLMWEB"]
                                        => issue(store = "VLM.IAM.PRD", types = ("http://schemas.vlm.be/iam/claims/authorized", "http://schemas.vlm.be/iam/claims/FullNam
                                       e", "http://schemas.vlm.be/iam/claims/VLMAccount", "http://schemas.vlm.be/iam/claims/VLMWebAccount", "http://schemas.vlm.be/iam/cl
                                       aims/AltName3", "http://schemas.vlm.be/iam/claims/rrnhash", "http://schemas.vlm.be/iam/claims/unauthorizedredirecturl"), query = "
                                       exec IsAuthorizedNaamFull @UserName={0}, @Application='TOMAS localhost'", param = c.Value);
                                       
                                       @RuleName = "IsAuthorizedRRNHash"
                                       c:[Type == "http://schemas.vlm.be/iam/claims/rrnhash"]
                                        && c1:[Type == "http://schemas.vlm.be/iam/claims/source", Value =~ "eID"]
                                        => issue(store = "VLM.IAM.PRD", types = ("http://schemas.vlm.be/iam/claims/authorized", "http://schemas.vlm.be/iam/claims/FullNam
                                       e", "http://schemas.vlm.be/iam/claims/VLMAccount", "http://schemas.vlm.be/iam/claims/VLMWebAccount", "http://schemas.vlm.be/iam/cl
                                       aims/AltName3", "http://schemas.vlm.be/iam/claims/rrnhash", "http://schemas.vlm.be/iam/claims/unauthorizedredirecturl"), query = "
                                       exec IsAuthorizedRRNHashFull @Application='TOMAS localhost' ,@RRNHash={0}", param = c.Value);
                                       
                                       @RuleName = "AddSource"
                                       c:[Type == "http://schemas.vlm.be/iam/claims/source"]
                                        => issue(claim = c);
                                       
                                       @RuleName = "PassName"
                                       c:[Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"]
                                        => issue(claim = c);
                                       
                                       @RuleName = "PassVLMIdenitifier"
                                       c:[Type == "http://schemas.vlm.be/iam/claims/Identifier"]
                                        => issue(claim = c);
                                       
                                       @RuleName = "PassAuthenticationmethod"
                                       c:[Type == "http://schemas.vlm.be/iam/claims/authenticationmethod"]
                                        => issue(claim = c);
                                       
                                       
DelegationAuthorizationRules         : 
LastPublishedPolicyCheckSuccessful   : 
LastUpdateTime                       : 1/01/1900 1:00:00
LastMonitoredTime                    : 1/01/1900 1:00:00
ImpersonationAuthorizationRules      : 
AdditionalAuthenticationRules        : 
AccessControlPolicyName              : 
AccessControlPolicyParameters        : 
ResultantPolicy                      : 